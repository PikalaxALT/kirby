#!/usr/bin/env snakemake

import platform
import requests
import pathlib
import os
import tempfile
import atexit
import shutil

configfile: 'snakeconf.yml'

_speedchoice_version = config['speedchoice_version']
_speedchoice_version_no_dots = _speedchoice_version.replace('.', '')
_zxplus_version = config['zxplus_version']
_item_rando_version = config['item_rando_version']

_zxplus_version_tuple = tuple(int(x) for x in _zxplus_version.split('.'))
_item_rando_version_tuple = tuple(int(x) for x in _item_rando_version.split('.'))
_speedchoice_version_tuple = tuple(int(x) for x in _speedchoice_version.split('.'))

is_windows = platform.system() == 'Windows'

_exe_extension = '.exe' if is_windows else ''

if is_windows:
    if _item_rando_version_tuple >= (8,):
        _zip_name = 'Pokemon.Crystal.Item.Randomizer'
    else:
        _zip_name = 'ItemRando'
else:
    if _item_rando_version_tuple >= (8,):
        _zip_name = 'ItemRandoLinuxCLI'
    else:
        _zip_name = 'ItemRandoCLI-Linux'

_zip_dir = 'Pokemon Crystal Item Randomizer' if is_windows else 'ItemRandoCLI-Linux'
_flips = pathlib.Path(config['flips']['Windows' if is_windows else None]).resolve()

_item_rando_cli = pathlib.Path(config['item_rando']['Windows' if is_windows else None]).resolve()
_item_rando_dir = _item_rando_cli.parent

config['outfile'] = pathlib.Path(config['outfile']).resolve()
os.makedirs(config['outfile'].parent, exist_ok=True)

_zxplus_settings_file = (pathlib.Path(config['zxplus_settings']) / config['zx_preset']).with_suffix('.rnqs').resolve()
_item_rando_mode_file = (_item_rando_dir / 'Modes' / config['item_preset']).with_suffix('.yml').resolve()
_vanilla_rom_file = pathlib.Path(config['vanilla_rom']).resolve()

rule all:
    input:
        config['outfile'],

rule install_zx:
    output:
        config['zxplus_jar'],
    params:
        version=_zxplus_version,
    shell:
        'wget -O {output} -q -nc https://github.com/choatix/zxplus/releases/download/v{params.version}/universal-pokemon-randomizer-zx.jar'

rule download_zx_settings:
    output:
        _zxplus_settings_file,
    params:
        version=_zxplus_version,
        outdir=_zxplus_settings_file.parent,
    run:
        params.outdir.mkdir(parents=True, exist_ok=True)
        if _zxplus_version_tuple >= (1,):
            shell('wget -q -nc https://github.com/choatix/zxplus/releases/download/v{params.version}/ZXsettings.zip '
                  '&& unzip -ooq "ZXsettings.zip" '
                  '&& cp "ZXsettings"/* "{params.outdir}"/ '
                  '&& rm -rf "ZXsettings.zip" "ZXsettings"')
        else:
            print('Settings are not available before UPR-ZX v1')

rule install_item_rando:
    output:
        cli = _item_rando_cli,
        mode = _item_rando_mode_file,
    params:
        exe_extension = _exe_extension,
        zip_name = _zip_name,
        zip_dir = _zip_dir,
        version = _item_rando_version,
        rando_dir = _item_rando_dir,
    shell:
        'wget -q -nc https://github.com/choatix/Pokemon-Crystal-Item-Randomizer/releases/download/v{params.version}/{params.zip_name}.zip ' \
        '&& unzip -oqq "{params.zip_name}.zip" && ' \
        'cp -r "{params.zip_dir}"/* "{params.rando_dir}" && ' \
        'rm -rf "{params.zip_dir}" "{params.zip_name}.zip"'

rule clone_baserom:
    output:
        _vanilla_rom_file.parent / 'Makefile',
    params:
        dest_dir = _vanilla_rom_file.parent,
    shell:
        'git clone --recursive https://github.com/pret/pokecrystal.git "{params.dest_dir}"'

rule build_baserom:
    input:
        rules.clone_baserom.output,
    output:
        _vanilla_rom_file,
    params:
        bind_dir = _vanilla_rom_file.parent,
    threads:
        64
    shell:
        'docker run --rm -v "{params.bind_dir}":/rom -w /rom kemenaran/rgbds:0.6.0 ' \
        'make -j {threads} crystal11'

rule download_flips:
    output:
        _flips,
    shell:
        'wget -q -nc https://dl.smwcentral.net/11474/floating.zip ' \
        '&& unzip -qqo floating.zip -d "{_flips.parent}" && ' \
        'rm -f floating.zip'

rule download_speedchoice:
    input:
        baserom=rules.build_baserom.output,
        flips=rules.download_flips.output,
    output:
        config['speedchoice_rom'],
    params:
        version=_speedchoice_version,
        version_nodots=_speedchoice_version_no_dots,
    run:
        if _speedchoice_version_tuple < (8,):
            shell('wget -q -nc https://github.com/choatix/pokecrystal-speedchoice/releases/download/v{params.version}/Speedchoice.zip '
                  '&& unzip -qqo Speedchoice.zip -d Speedchoice '
                  '&& "{input.flips}" -a Speedchoice/Patches/VTo{params.version_nodots}.ips "{input.baserom}" "{output}" '
                  '&& rm -rf Speedchoice Speedchoice.zip')
        else:
            shell('wget -q -nc https://github.com/choatix/pokecrystal-speedchoice/releases/download/v{params.version}/VTo{params.version_nodots}.ips '
                  '&& "{input.flips}" -a VTo{params.version_nodots}.ips "{input.baserom}" "{output}" '
                  '&& rm -f VTo{params.version_nodots}.ips')

rule resources:
    input:
        rules.build_baserom.output,
        rules.download_speedchoice.output,
        rules.install_zx.output,
        rules.install_item_rando.output,
        rules.download_flips.output,

rule invoke_zx:
    input:
        baserom=rules.download_speedchoice.output,
        jar=rules.install_zx.output,
        settings=rules.download_zx_settings.output,
    params:
        seed_arg=expand('# TODO: zxplus cli to support custom seed', seed=config['zx_seed']) if config['zx_seed'] else '',
    output:
        temp(expand('{outs}', outs=tempfile.mktemp(suffix='.gbc'))),
    shell:
        'java -Xmx768M -jar {input.jar} cli -i "{input.baserom}" -o "{output}" -s "{input.settings}" {params.seed_arg}'

rule invoke_itemrando:
    input:
        zxrom=rules.invoke_zx.output,
        cli=rules.install_item_rando.output.cli,
        settings=rules.install_item_rando.output.mode,
    output:
        temp(expand('{outs}', outs=tempfile.mktemp(suffix='.gbc'))),
    params:
        seed_arg=expand('-s {seed}', seed=config['item_seed']) if config['item_seed'] else '',
        cli_parent=_item_rando_dir,

    shell:
        'cd {params.cli_parent} && "{input.cli}" cli -i "{input.zxrom}" -o "{output}" -m "{input.settings}" {params.seed_arg}'

rule create_patchfile:
    input:
        randorom=rules.invoke_itemrando.output,
        baserom=rules.build_baserom.output,
        flips=rules.download_flips.output,
    output:
        config['outfile'],
    shell:
        '"{input.flips}" -c "{input.baserom}" "{input.randorom}" "{output}"'
